#!/usr/bin/env bash

################################################################################
# AUTOR: Victor Dias Marques                                                   #
# CONTATO: victordmarx@pm.me                                                   #    
# DATA: 20/09/2025                                                             #
# DESCRIÇÃO: Gera backups de arquivos pessoais                                 #
################################################################################
# VERSÃO: v1.3.0                                                               #
# HISTÓRICO:                                                                   #
#   1.3.0: 19/10/2025                                                          #
#     MELHORIAS                                                                #
#        - Criado o arquivo last_bkp.txt, que serve como whitelist e controle  #
#          de datas de backups.                                                #
#        - O backup ts passa a validar se a data de alteração do diretório é   #
#          posterior à data do último backup, antes de realizar.               #
#   1.2.1: 28/09/2025                                                          #
#     CORREÇÕES                                                                #
#        - Agora o script valida se o parâmetro informado é válido.            #
#        - Criada remoção do arquivo de log dos backups t e ts.                #
#     REFATORAÇÃO                                                              #
#        - Criada function para compactação, criptografia e remoção dos        #
#          arquivos.                                                           #
#   1.2.0: 26/09/2025                                                          #
#     CORREÇÕES                                                                #
#        - Caso fosse informado o mesmo diretório 2 vezes, ele fazia o mesmo   #
#          backup, agora ignora a segunda vez.                                 #
#     MELHORIAS                                                                #
#        - Implementação realizada para permitir selecionar mais de 1 diretório#
#          no backup parcial.                                                  #
#   1.1.0: 24/09/2025                                                          #
#     CORREÇÕES                                                                #
#        - Validação de parâmetros ao chamar o backup                          #
#        - Trata diretórios com espaços como um só                             #
#      MELHORIAS                                                               #
#         - Implementada geração de log                                        #
#         - Implementada criptografia de log e remoção do arquivo original     #
#         - Caminhos de diretórios colocados em variáveis                      #
#         - É criado um log para cada diretório                                #
#   1.0.0: 27/09/2025 - Versão inicial                                         #
################################################################################

function com_crypt_rem() {
   
    echo "Compactando diretório $directory"
    tar -czvf $dir_bkp/$archive_name -C $directory .
    echo "Compactação concluída"

    echo "Criptografando arquivo"
    gpg -o $dir_bkp/$archive_name.gpg -e -r "Backup pessoal" $dir_bkp/$archive_name
    echo "Criptografia concluída"

    echo "Removendo arquivo compactado"
    rm $dir_bkp/$archive_name
    echo "Arquivo removido"
   
    echo "Criptografando log"
    gpg -o $LOGFILE.gpg -e -r "Backup pessoal" $LOGFILE
    echo "Log criptografado"
    echo "Removendo arquivo de log original"
    rm $LOGFILE
    echo "Arquivo removido"

    echo "Atualizando data de backup"
    awk -v dir=$directory -v data=$date '{if ($1==dir) $2=data; print}' last_bkp.txt > last_bkp.tmp && mv last_bkp.tmp last_bkp.txt
    echo "Atualização concluída"
}

bkp_type="$1"

if [ $# -ne 1 ]; then # valida se a quantidade de parâmetros informados ($#) não é igual a 1.
    echo "Você precisa especificar apenas um dos parâmetros: t para backup total em arquivo único, ou ts para backup total em arquivos separados, ou p para backup parcial"
    exit 1
fi

if [[ "$bkp_type" != "t" && "$bkp_type" != "ts" && "$bkp_type" != "p" ]]; then
    echo "Parâmetro inválido."
    exit 1
fi


date=$(date "+%Y-%m-%d")

dir_pessoal=~/Seagate/Pessoal
dir_bkp=~/Seagate/Backups

dirs=($(awk '{print $1}' last_bkp.txt))

case "$bkp_type" in
    t)
	LOGFILE=$dir_bkp/T-$date.log
	exec > >(tee >(awk '{ print strftime("[%H:%M:%S]"), $0; fflush(); }' >> "$LOGFILE")) 2>&1
	directory=$dir_pessoal
	archive_name="Pessoal-$date.tar.gz"
	com_crypt_rem
		
	;;

    ts)
	for directory in "${dirs[@]}"; do
	    last_backup=($(cat last_bkp.txt | grep "$directory" | awk '{print $2'}))
	    directory_change=($(find $directory -type d -newermt $last_backup))
										    
	    if [[ -n "$directory_change" ]]; then
		dir_name=$(basename "$directory")
		LOGFILE=$dir_bkp/TS-$dir_name-$date.log
		exec > >(tee >(awk '{ print strftime("[%H:%M:%S]"), $0; fflush(); }' >> "$LOGFILE")) 2>&1
		archive_name="$dir_name-$date.tar.gz"

		com_crypt_rem	
		
	    fi

	    echo "$directory com data de alteração anterior ao último backup, não será realizado"

	done
	;;

    p)
	#Exibe os diretório de forma numerada e aguarda retorno do usuário
	i=1
	for dir in "${dirs[@]}"; do
	    echo "$i) $dir"
	    ((i++))
	done

	while true; do
	    read -rp "Escolha um ou mais diretórios (números separados por espaço): " REPLY

	    # Se nada foi digitado
	    if [[ -z "$REPLY" ]]; then
        	echo "Nenhuma opção informada. Tente novamente."
    	    	continue
	    fi

	    # Transforma a entrada em array (separado por espaço)
	    choices=($REPLY)

	    declare -A seen=()

    	    # Array para armazenar os diretórios válidos
    	    selected=()

	    # Validar cada escolha
    	    valid=true
    	    for choice in "${choices[@]}"; do
        	if [[ "$choice" =~ ^[0-9]+$ ]] && (( choice >= 1 && choice <= ${#dirs[@]} )); then
		    if [[ -z "${seen[$choice]}" ]]; then
			selected+=("${dirs[choice-1]}")
			seen[$choice]=1
		    fi
        	else
            	    echo "Opção inválida: $choice"
            	    valid=false
	        fi
    	    done

    	    if $valid; then
        	echo "Você escolheu: ${selected[*]}"
	        break
    	    fi
	done
	
	for directory in "${selected[@]}"; do
	    base_name=$(basename "$directory")
	    LOGFILE=$dir_bkp/P-$base_name-$date.log
	    exec > >(tee >(awk '{ print strftime("[%H:%M:%S]"), $0; fflush(); }' >> "$LOGFILE")) 2>&1
	    
	    archive_name="$base_name-$date.tar.gz"
	    
	    com_crypt_rem
	done
	;;
esac
